#+TILTE:LiquidZulu's Doom Config
/This file is best viewed in [[https://www.gnu.org/software/emacs/][emacs]]!/

* Introduction
This is my config for [[https://github.com/hlissner/doom-emacs][Doom Emacs]]
#+begin_quote
...a configuration framework for GNU Emacs tailored for Emacs bankruptcy veterans who want less framework in their frameworks, a modicum of stability (and reproducibility) from their package manager, and the performance of a hand rolled config (or better). It can be a foundation for your own config or a resource for Emacs enthusiasts to learn more about our favorite operating system.
#+end_quote
** Modifying this config
=README.org= contains a number of source blocks that may be modified at will, =config.el= will automatically load all elisp source contained in =README.org=.
** Why Doom?
You will notice from a perusing of =init.el= that I have disabled [[https://www.emacswiki.org/emacs/Evil][Evil Mode]], so I am clearly not on Doom for the vi bindings. I use Doom for the speed and to avoid bankruptcy --- vanilla bindings are good enough in most areas though I have modified the movement to make sense on Colemak-DHm.

* Lexical Binding
Enable Lexical Binding
#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* Helper Functions
I got these from [[https://dustinlacewell.github.io/emacs.d/][Dustin Lacewell's init.el]]. I dont use most of these but its nice to have them if im going to be taxing things from his init.

** :function
Make non-interactive functions out of forms or a symbol.
#+begin_src elisp
(defmacro :function (&rest body)
  (if (->> body length (< 1))
      `(lambda () ,@body)
    (pcase (car body)
      ;; command symbol
      ((and v (pred commandp))
       `(lambda () (call-interactively (quote ,v))))
      ;; function symbol
      ((and v (pred symbolp))
       `(lambda () (,v)))
      ;; quoted command symbol
      ((and v (pred consp) (guard (eq 'quote (car v))) (pred commandp (cadr v)))
       `(lambda () (call-interactively ,v)))
      ;; quoted function symbol
      ((and v (pred consp) (guard (eq 'quote (car v))))
       `(lambda () (,(cadr v))))
      ;; body forms
      (_ `(lambda () ,@body) ))))
#+end_src

** :command
Make interactive commands out of forms or a symbol.
#+begin_src elisp
(defmacro :command (&rest body)
  (if (->> body length (< 1))
      `(lambda () (interactive) ,@body)
    (pcase (car body)
      ;; command symbol
      ((and v (pred commandp))
       `(lambda () (interactive) (call-interactively (quote ,v))))
      ;; function symbol
      ((and v (pred symbolp))
       `(lambda () (interactive) (,v)))
      ;; quoted command symbol
      ((and v (pred consp) (guard (eq 'quote (car v))) (pred commandp (cadr v)))
       `(lambda () (interactive) (call-interactively ,v)))
      ;; quoted function symbol
      ((and v (pred consp) (guard (eq 'quote (car v))))
       `(lambda () (interactive) (,(cadr v))))
      ;; body forms
      (_ `(lambda () (interactive) ,@body) ))))
#+end_src

** :after
Defer some forms until the given package is loaded.
#+begin_src elisp
(defmacro :after (package &rest body)
  "A simple wrapper around `with-eval-after-load'."
  (declare (indent defun))
  `(with-eval-after-load ',package ,@body))
#+end_src

** :hook
Register some forms or a symbol with a hook.
#+begin_src elisp
(defmacro :hook (hook-name &rest body)
  "A simple wrapper around `add-hook'"
  (declare (indent defun))
  (let* ((hook-name (format "%s-hook" (symbol-name hook-name)))
         (hook-sym (intern hook-name))
         (first (car body))
         (local (eq :local first))
         (body (if local (cdr body) body))
         (first (car body))
         (body (if (consp first)
                   (if (eq (car first) 'quote)
                       first
                     `(lambda () ,@body))
                 `',first)))
    `(add-hook ',hook-sym ,body nil ,local)))
#+end_src

** :push
A wrapper around add-to-list.
#+begin_src elisp
(defmacro :push (sym &rest body)
  (declare (indent defun))
  (if (consp body)
      `(setq ,sym (-snoc ,sym ,@body))
    `(add-to-list ,sym ,body)))
#+end_src

** :bind
Bind some forms or a symbol to a key. (I use map! instead)
#+begin_src elisp
(defmacro :bind (key &rest body)
  (declare (indent defun))
  (pcase key
    ;; kbd string resolving symbol
    ((and k (pred symbolp) (pred boundp) (guard (stringp (eval key))))
     `(global-set-key (kbd ,(eval key)) ,(eval `(:command ,@body))))
    ;; partial mode symbol
    ((pred symbolp)
     (let ((mode (intern (format "%s-map" key)))
           (key (eval (car body)))
           (body (eval `(:command ,@(cdr body)))))
       `(define-key ,mode (kbd ,key) ,body)))
    ;; global binding
    (_ `(global-set-key (kbd ,key) ,(eval `(:command ,@body))))))
#+end_src

* Settings

** email
Email and username, some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src elisp
(setq user-full-name "LiquidZulu"
      user-mail-address "liquidzulu@pm.me")
#+end_src
** Image size
Sets inline images to be 500 wide
#+begin_src elisp
(setq org-image-actual-width 500)
#+end_src

** Font stuff
*** Font-Family
#+begin_src elisp
(setq
 doom-font      (font-spec :family "Mononoki" :size 24)
 doom-big-font  (font-spec :family "Mononoki" :size 36))
#+end_src
** Org settings
*** headline levels
Makes it so that I can style exported html, no clue why it isn't higher by default.
#+begin_src elisp
(setq org-export-headline-levels 512)
#+end_src
*** org-directory
I don't want all of my orgfiles on my c drive, I like to keep them here
#+begin_src elisp
(setq org-directory "e:/emacs/documents/notes/org")
#+end_src
*** image settings
Display images on startup
#+begin_src elisp
(setq org-startup-with-inline-images t)
#+end_src
Set image width to 500
#+begin_src elisp
(setq org-image-actual-width 500)
#+end_src

** line number style
This determines the style of line numbers in effect. If set to =nil=, line numbers are disabled. For relative line numbers, set this to =relative=.
#+begin_src elisp
(setq display-line-numbers-type t)
#+end_src

** various misc setings
Blah
#+begin_src elisp
(setq delete-by-moving-to-trash t)           ; Delete files to trash
(setq tab-width 4)                            ; Set width for tabs
(setq uniquify-buffer-name-style 'forward)    ; Uniquify buffer names
(setq window-combination-resize t)            ; take new window space from all other windows (not just current)
(setq x-stretch-cursor t)                    ; Stretch cursor to the glyph width

(setq undo-limit 80000000)                    ; Raise undo-limit to 80Mb
(setq evil-want-fine-undo t)                  ; By default while in insert all changes are one big blob. Be more granular
(setq auto-save-default t)                    ; Nobody likes to loose work, I certainly don't
(setq inhibit-compacting-font-caches t)       ; When there are lots of glyphs, keep them in memory
(setq truncate-string-ellipsis "â€¦")          ; Unicode ellispis are nicer than "...", and also save /precious/ space

(delete-selection-mode 1)                  ; Replace selection when inserting text
(setq line-spacing 0.3)                    ; seems like a nice line spacing balance.
#+end_src

** Autosaves
#+begin_src elisp
(setq auto-save-default t)
(setq auto-save-timeout 20)   ; every 20 secs
(setq auto-save-interval 20)  ; or every 20 keystrokes
#+end_src

** Prettify symbols
#+begin_src elisp
(global-prettify-symbols-mode 1)
#+end_src

** Parenthesis Settings
*** Rainbow Delimiters
[[https://coolors.co/ff1d1a-ff243a-ff5d38-ffc72e-ffd724-33ffeb-75ffd6-fffb7a-fff1c7][These]] are the colours I use.
#+begin_src elisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

(setq rainbow-delimiters-depth-1-face "FF1D1A")
(setq rainbow-delimiters-depth-2-face "FF243A")
(setq rainbow-delimiters-depth-3-face "FF5D38")
(setq rainbow-delimiters-depth-4-face "FFC72E")
(setq rainbow-delimiters-depth-5-face "FFD724")
(setq rainbow-delimiters-depth-6-face "33FFEB")
(setq rainbow-delimiters-depth-7-face "75FFD6")
(setq rainbow-delimiters-depth-8-face "FFFB7A")
(setq rainbow-delimiters-depth-9-face "FFF1C7")
#+end_src


*** Highlight Matching Bracket
#+begin_src elisp
(require 'paren)
(show-paren-mode 1)
(setq show-paren-delay 0)
(:after xresources
  (set-face-foreground 'show-paren-match (theme-color 'green))
  (set-face-foreground 'show-paren-mismatch "#f00")
  (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
  (set-face-attribute 'show-paren-mismatch nil :weight 'extra-bold))
#+end_src

* Key Mapping
I use [[https://colemakmods.github.io/mod-dh/][Colemak-DHm]] -- my specific layout can be found [[https://configure.ergodox-ez.com/ergodox-ez/layouts/BO06w/latest/0][here]] -- so remapping of certain core keys, namely motion keys, is required for ergonomics and ease of use.
#+begin_src elisp
(setq w32-apps-modifier 'hyper)
(setq w32-lwindow-modifier 'super)
(setq w32-rwindow-modifier 'hyper)

(map!
 "C-l"          #'beginning-of-line
 "C-u"          #'end-of-line
 "C-n"          #'backward-char
 "C-e"          #'forward-char

 "M-l"          #'previous-line
 "M-u"          #'next-line
 "M-n"          #'backward-word
 "M-e"          #'forward-word

 "C-M-s-l"      #'(lambda () (interactive) (previous-line) (beginning-of-line))
 "C-M-s-u"      #'(lambda () (interactive) (next-line)     (end-of-line))
 "C-M-s-n"      #'backward-paragraph
 "C-M-s-e"      #'forward-paragraph

 "C-;"          #'org-footnote-action

 "C-M-s-d"      #'centaur-tabs-backward
 "C-M-s-v"      #'centaur-tabs-forward
 "C-M-s-t"      #'centaur-tabs-select-beg-tab
 "C-M-s-g"      #'centaur-tabs-select-end-tab
 "C-M-s-k"      #'centaur-tabs--kill-this-buffer-dont-ask

 "C-x t t"      #'treemacs

 "C-c i i"      #'(lambda () (interactive) (insert "#+CAPTION:\n#+NAME:\n[[./images]]") (backward-char) (backward-char) "Insert image")  ; "insert image"

 "C-M-s-x r i"      #'org-toggle-inline-images  ; "render image"
 "C-M-s-x p p j a"  #'json-pretty-print-buffer-ordered
 "C-M-s-x p p j r"  #'json-pretty-print-ordered

 "C-M-s-<backspace>" #'(lambda () (interactive) (beginning-of-line) (org-delete-backward-char 1) (org-self-insert-command))

 "M-y" #'yank ; I keep accidently pressing this instead of C-y, and I hate it, it breaks everything

                                        ;"C-RET"    #'(lambda () (interactive) (+org/insert-item-below) (org-return))

 ;; "C-M-x f a"   ;#'helm-bibtex         ; "find article" : opens up helm bibtex for search.
 ;; "C-M-x o n"   ;#'org-noter           ; "org noter"  : opens up org noter in a headline
 ;; "C-M-x r c i" ;#'org-clock-in        ; "routine clock in" : clock in to a habit.
 ;; "C-M-x c b"   ;#'beacon-blink        ; "cursor blink" : makes the beacon-blink
 )
#+end_src

* Maximising Frame on Windows
Pretty sure this is done by
#+begin_src elisp
(if (eq initial-window-system 'x)       ; if started by emacs command or desktop file
    (toggle-frame-maximized))
#+end_src
on linux but adding this
#+begin_src elisp
(defun maximize-frame ()
  "Maximizes the active frame in Windows"
  (interactive)
  ;; Send a `WM_SYSCOMMAND' message to the active frame with the
  ;; `SC_MAXIMIZE' parameter.
  (when (eq system-type 'windows-nt)
    (w32-send-sys-command 61488)))
(add-hook 'window-setup-hook 'maximize-frame t)
#+end_src
makes it work on win 10.

* Only Show Encoding When Not UTF-8
I basically only use UTF-8 so it takes up space for no reason most of the time.
#+begin_src elisp
(defun doom-modeline-conditional-buffer-encoding ()
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))
(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

* Add Default Preamble to New Orgmode Files
I dont like to type out all that crap on my own
#+begin_src elisp
(setq
 org-css "file:///e:/emacs/documents/org-css/css/org.css")
(setq
 org-preamble (format
               "#+TITLE:\n#+AUTHOR:LiquidZulu\n#+BIBLIOGRAPHY:e:/Zotero/library.bib\n#+PANDOC_OPTIONS: csl:e:/Zotero/styles/australasian-physical-and-engineering-sciences-in-medicine.csl\n#+HTML_HEAD:<link rel=\"stylesheet\" type=\"text/css\" href=\"%s\"/>\n/This file is best viewed in [[https://www.gnu.org/software/emacs/][emacs]]!/"
               org-css))

(add-hook 'find-file-hook
          (lambda ()
            (if
                (string=
                 (substring
                  (buffer-name)
                  (if (> (length (buffer-name)) 3) (- (length (buffer-name)) 3) 0)
                  nil)
                 "org")
                (if
                    (=
                     (buffer-size)
                     0)
                    ((lambda ()
                       (insert org-preamble)

                                        ; navigate point to end of #+TITLE:, doesnt work when launching from gitbash for some reason, point just moves right back down after doom does something
                       (goto-line 1)
                       (forward-word)
                       (forward-char)))))))
#+end_src

** Automatically update the #+DATE
#+begin_src elisp
; Â¯\_(ãƒ„)_/Â¯
; TODO I think the relevant search term for #+FOO: is keyword but cant find any function that edits them nice and simple, if not ill need to search for it manually which will be a massive pain
#+end_src
* Add Default Preamble to New Markdown Files
Similar to above, I like docusaurus
#+begin_src elisp
(setq
 md-preamble
 "---\nslug:\ntitle:\nauthor: Liquidzulu\nauthor_title: Anarcho-Capitalist YouTuber\nauthor_url: https://www.youtube.com/channel/UCTf0py7ryuSldOsDm4abSsg\nauthor_image_url: https://yt3.ggpht.com/ytc/AAUvwngTBrwImrEHOckgvAV4I45tRm4-lPRC-X0KvsAT9w=s176-c-k-c0x00ffffff-no-rj\ntags: []\n---")

(add-hook 'find-file-hook
          (lambda ()
            (if
                (string=
                 (substring
                  (buffer-name)
                  (if (> (length (buffer-name)) 3) (- (length (buffer-name)) 3) 0)
                  nil)
                 "mdx")
                (if
                    (=
                     (buffer-size)
                     0)
                    ((lambda ()
                       (insert md-preamble)

                       (goto-line 2)
                       (forward-word)
                       (forward-char)))))))
#+end_src

* Package Config
** Splashcii
Splashcii is a CLI program that generates random ASCII splashart, you need to download it [[https://github.com/folke/splashcii][here]] for this to work.
#+begin_src elisp
;; splashcii
(defvar +fl/splashcii-query ""
  "The query to search on asciiur.com")

(defun +fl/splashcii ()
  (split-string (with-output-to-string
                  (call-process "splashcii" nil standard-output nil +fl/splashcii-query))
                "\n" t))

(defun +fl/doom-banner ()
  (let ((point (point)))
    (mapc (lambda (line)
            (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                                'face 'doom-dashboard-banner) " ")
            (insert "\n"))
          (+fl/splashcii))
    (insert (make-string (or (cdr +doom-dashboard-banner-padding) 0) ?\n))))

;; override the first doom dashboard function
(setcar (nthcdr 0 +doom-dashboard-functions) #'+fl/doom-banner)

;; (setq +fl/splashcii-query "space")
#+end_src
** ox-json
#+begin_src elisp
(require 'ox-json)
#+end_src
** org-make-toc
~For tables of contents within orgmode so I dont have to look at md anymore~ This didnt work and was fairly bloaty, no clue what went wrong hopefully I can fix at some point
#+begin_src elisp
                                        ;(add-hook 'org-mode-hook #'org-make-toc-mode) ; automatically update toc
#+end_src
** org-ref
~org-ref is necessary for writing of any sort of academic material in emacs, makes citations a lot easier.~ I just use the built in =org-footnote-action=,  now, which I bind to =C-;=. Might go back to this at some point, maybe if I fix my LaTeX compiler.
#+begin_src elisp
(use-package! org-ref
    :after org
    :init
    ; code to run before loading org-ref
    :config
    ; code to run after loading org-ref
    )
(setq
      ;org-ref-notes-directory (concatenate 'string org-directory "/org-ref")
      org-ref-default-bibliography '("e:/Zotero/library.bib")
      org-ref-pdf-directory "e:/Zotero/pdfs")

(after! org
  (add-to-list 'org-capture-templates
               '(("a"               ; key
                  "Article"         ; name
                  entry             ; type
                  ;(file+headline (concatenate 'string org-directory "/foo.org) "Article")  ; target
                  "\* %^{Title} %(org-set-tags)  :article: \n:PROPERTIES:\n:Created: %U\n:Linked: %a\n:END:\n%i\nBrief description:\n%?"  ; template

                  :prepend t        ; properties
                  :empty-lines 1    ; properties
                  :created t        ; properties
))) )
#+end_src
** helm-bibtex
Helm BibTeX is a package that allows for searching through BibTeX bibliographies.
#+begin_src elisp
(use-package! helm-bibtex
  :after org
  :init
  ; blah blah
  :config
  ;blah blah
  )

(setq bibtex-format-citation-functions
      '((org-mode . (lambda (x) (insert (concat
                                         "\\cite{"
                                         (mapconcat 'identity x ",")
                                         "}")) ""))))
(setq
      bibtex-completion-pdf-field "file"
      bibtex-completion-bibliography
      '("e:/Zotero/library.bib")
      bibtex-completion-library-path '("e:/Zotero/")
     ; bibtex-completion-notes-path "~/Dropbox/Org/references/articles.org"  ;; not needed anymore as I take notes in org-roam
      )
#+end_src
